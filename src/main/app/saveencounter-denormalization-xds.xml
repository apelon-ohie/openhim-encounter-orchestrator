<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:https="http://www.mulesoft.org/schema/mule/https" xmlns:context="http://www.springframework.org/schema/context" xmlns:wsa="http://cxf.apache.org/ws/addressing" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" version="CE-3.3.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd 
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd 
http://cxf.apache.org/ws/addressing http://cxf.apache.org/schemas/ws-addr-conf.xsd ">
    <https:connector name="HTTP_HTTPS" validateConnections="true" sendBufferSize="0" receiveBufferSize="0" receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0" doc:name="HTTP\HTTPS">
        <service-overrides sessionHandler="org.mule.session.NullSessionHandler"/>
        <https:tls-client path="${ihe.keystore}" storePassword="${ihe.storepassword}"/>
        <https:tls-key-store path="${ihe.keystore}" keyPassword="${ihe.keypassword}" storePassword="${ihe.storepassword}"/>
    </https:connector>
    <flow name="mediation-denormalization-saveencounters-xds" doc:name="mediation-denormalization-saveencounters-xds">
        <vm:inbound-endpoint exchange-pattern="request-response" path="saveEncounters-De-normailization-XDS" responseTimeout="10000" mimeType="text/plain" doc:name="Read from queue"/>
        <logger message="De-normalizing a save encounters transaction to xds" level="INFO" doc:name="Logger"/>
        <custom-transformer class="org.jembi.heal.DoNothingTransformer" doc:name="Off-ramp Transformer"/>
        <message-properties-transformer doc:name="Set Path Property">
            <add-message-property key="path" value="#[groovy: return message.payload.buildUrlWithRequestParams();]"/>
        </message-properties-transformer>
        <expression-transformer evaluator="groovy" expression="return message.payload.body;" doc:name="Transfor HTTPRestfulMessage to HTTP Body"/>
        <custom-transformer class="org.jembi.rhea.transformers.XDSRepositoryProvideAndRegisterDocument" doc:name="Transform to XDS Provide and Register Document Set.b Request">
            <spring:property name="systemSourceID" value="${ihe.systemSourceID}"/>
        </custom-transformer>
        <response>
            <logger message="Recieved response from xds provider: #[groovy: message.toString();]]" level="INFO" doc:name="Logger"/>
            <custom-transformer class="org.jembi.rhea.transformers.XDSRepositoryProvideAndRegisterDocumentResponse" doc:name="Process XDS Response">
                <spring:property name="xdsRepositoryHost" value="${xds.repository.host}"/>
                <spring:property name="requestedAssigningAuthority" value="${pix.requestedAssigningAuthorityId}"/>
            </custom-transformer>
            <custom-transformer class="org.jembi.rhea.transformers.HttpResponseToRestfulHttpResponseTransformer" doc:name="HttpResponseToRestfulHttpResponseTransformer"/>
            <logger message="Responce normalization" level="INFO" doc:name="Logger"/>
            <custom-transformer class="org.jembi.heal.DoNothingTransformer" doc:name="On-ramp Transformer"/>
            <custom-transformer class="org.jembi.heal.DoNothingTransformer" doc:name="Translation Transformer"/>
        </response>
        <cxf:jaxws-client operation="DocumentRepository_ProvideAndRegisterDocumentSet-b" clientClass="ihe.iti.xds_b._2007.DocumentRepositoryService" port="DocumentRepository_Port_Soap12"  doc:name="SOAP" mtomEnabled="true">
            <cxf:features>
				<wsa:addressing />
			</cxf:features>
        </cxf:jaxws-client>
        <echo-component doc:name="Echo"/>
        <logger message="Raw SOAP message: #[message:payload]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[groovy: return ${ihe.secure};]">
                <processor-chain>
                	<!-- Gazelle test 11109 -->
                    <!-- <https:outbound-endpoint exchange-pattern="request-response" host="131.254.209.16" port="10072"  doc:name="Deliver message to XDS repository (Secure)" connector-ref="HTTP_HTTPS"/> -->
                	<!-- For IHE Test 12046 -->
                    <!-- <https:outbound-endpoint exchange-pattern="request-response" host="ihexds.nist.gov" port="12081" path="tf6/services/repositoryBonedoc" doc:name="Deliver message to XDS repository (Secure)" connector-ref="HTTP_HTTPS"/> -->
                    <https:outbound-endpoint exchange-pattern="request-response" host="${xds.repository.host}" port="${xds.repository.securePort}" path="${xds.repository.path}" doc:name="HTTPS" connector-ref="HTTP_HTTPS"/>
                </processor-chain>
            </when>
            <otherwise>
                <processor-chain>
                	<!-- For IHE Test 12049 -->
                    <!-- <http:outbound-endpoint exchange-pattern="request-response" host="ihexds.nist.gov" port="12080" path="tf6/services/repositoryBonedoc" doc:name="Deliver message to XDS repository"/> -->
                    <http:outbound-endpoint exchange-pattern="request-response" host="${xds.repository.host}" port="${xds.repository.port}" path="${xds.repository.path}" doc:name="HTTP"/>
                </processor-chain>
            </otherwise>
        </choice>
    </flow>
</mule>
